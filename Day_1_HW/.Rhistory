legend(1,400,c("n = 100","n = 10000"),col=c(2,4), pch=16, cex = 1.5)
dev.off() #close file
pdf(file="plotting_hw_tdc.pdf", width=6,height=6); #open the
file
barplot(rbind(counts_h100,counts_h1000),col=c(2,4),beside=T,names.arg=
seq(65, 71, by = 1),xlab="Height (in)",ylab="Count")
#100 = red(2), 1000 = blue (4)
#adding the legend
legend(1,400,c("n = 100","n = 1000"),col=c(2,4), pch=16, cex = 1.5)
dev.off() #close file
############ 4 ##############
#run 1000 simulations of sampling 100 people
mean_heights_100 <- NULL #make empty vector
for(i in 1:1000){
#starting with 10 to test
mean_heights_100[i] <- get_heights(100)
#run get heights for 100 people
#and store result in mean_heights 100
}
############ 5 ##############
#run 1000 simulations of sampling 1000 people
mean_heights_1000 <- NULL #make empty vector
for(i in 1:1000){
#starting with 10 to test
mean_heights_1000[i] <- get_heights(1000)
#run get heights for 100 people
#and store result in mean_heights 100
}
########### 6 ##############
#find the min between both sets
min_height <-
as.integer(min(min(mean_heights_100), min(mean_heights_1000)) - 1)
#find the max between both sets
max_height <-
as.integer(max(max(mean_heights_100), max(mean_heights_1000)) + 1)
#setting the bins
bins <- seq(min_height, max_height, by = 1)
#collecting counts based on our bins
counts_h100 <- hist(mean_heights_100,breaks=bins)$counts
counts_h1000 <- hist(mean_heights_1000,breaks=bins)$counts
par(mfrow=c(1,1), mar=c(4, 4, 3, 2)) #sets plotting area and
#margins
pdf(file="plotting_hw_tdc.pdf", width=6,height=6); #open the
file
barplot(rbind(counts_h100,counts_h1000),col=c(2,4),beside=T,names.arg=
seq(65, 71, by = 1),xlab="Average Height (in)",ylab="Count")
#100 = red(2), 1000 = blue (4)
#adding the legend
legend(1,400,c("n = 100","n = 1000"),col=c(2,4), pch=16, cex = 1.5)
#(x pos of top L, y pos of top L, labels, label colors, shapes, legend size)
dev.off() #close file
par(mfrow=c(1,1), mar=c(4, 4, 3, 2)) #sets plotting area and
#margins
arplot(rbind(counts_h100,counts_h1000),col=c(2,4),beside=T,names.arg=
seq(65, 71, by = 1),xlab="Average Height (in)",ylab="Count")
barplot(rbind(counts_h100,counts_h1000),col=c(2,4),beside=T,names.arg=
seq(65, 71, by = 1),xlab="Average Height (in)",ylab="Count")
barplot(rbind(counts_h100,counts_h1000),col=c(2,4),beside=T,names.arg=
seq(65, 73, by = 1),xlab="Average Height (in)",ylab="Count")
barplot(rbind(counts_h100,counts_h1000),col=c(2,4),beside=T,names.arg=
seq(65, 72, by = 1),xlab="Average Height (in)",ylab="Count")
legend(1,400,c("n = 100","n = 1000"),col=c(2,4), pch=16, cex = 1.5)
par(mfrow=c(1,1), mar=c(4, 4, 3, 2)) #sets plotting area and
#margins
pdf(file="plotting_hw_tdc.pdf", width=6,height=6); #open the
file
barplot(rbind(counts_h100,counts_h1000),col=c(2,4),beside=T,names.arg=
seq(65, 72, by = 1),xlab="Average Height (in)",ylab="Count")
#100 = red(2), 1000 = blue (4)
#adding the legend
legend(1,400,c("n = 100","n = 1000"),col=c(2,4), pch=16, cex = 1.5)
#(x pos of top L, y pos of top L, labels, label colors, shapes, legend size)
dev.off() #close file
barplot(rbind(counts_h100,counts_h1000),col=c(2,4),beside=T,names.arg=
seq(min_height, (max_height - 1), by = 1),xlab="Average Height (in)",ylab="Count")
#100 = red(2), 1000 = blue (4)
############ 4 ##############
#run 1000 simulations of sampling 100 people
mean_heights_100 <- NULL #make empty vector
for(i in 1:1000){
#starting with 10 to test
mean_heights_100[i] <- get_heights(100)
#run get heights for 100 people
#and store result in mean_heights 100
}
############ 5 ##############
#run 1000 simulations of sampling 1000 people
mean_heights_1000 <- NULL #make empty vector
for(i in 1:1000){
#starting with 10 to test
mean_heights_1000[i] <- get_heights(1000)
#run get heights for 100 people
#and store result in mean_heights 100
}
########### 6 ##############
#find the min between both sets
min_height <-
as.integer(min(min(mean_heights_100), min(mean_heights_1000)) - 1)
#find the max between both sets
max_height <-
as.integer(max(max(mean_heights_100), max(mean_heights_1000)) + 1)
#setting the bins
bins <- seq(min_height, max_height, by = 1)
#collecting counts based on our bins
counts_h100 <- hist(mean_heights_100,breaks=bins)$counts
counts_h1000 <- hist(mean_heights_1000,breaks=bins)$counts
par(mfrow=c(1,1), mar=c(4, 4, 3, 2)) #sets plotting area and
#margins
pdf(file="plotting_hw_tdc.pdf", width=6,height=6); #open the
file
barplot(rbind(counts_h100,counts_h1000),col=c(2,4),beside=T,names.arg=
seq(min_height, (max_height - 1), by = 1),xlab="Average Height (in)",ylab="Count")
#100 = red(2), 1000 = blue (4)
#adding the legend
legend(1,400,c("n = 100","n = 1000"),col=c(2,4), pch=16, cex = 1.5)
#(x pos of top L, y pos of top L, labels, label colors, shapes, legend size)
dev.off() #close file
############ 4 ##############
#run 1000 simulations of sampling 100 people
mean_heights_100 <- NULL #make empty vector
for(i in 1:1000){
#starting with 10 to test
mean_heights_100[i] <- get_heights(100)
#run get heights for 100 people
#and store result in mean_heights 100
}
############ 5 ##############
#run 1000 simulations of sampling 1000 people
mean_heights_1000 <- NULL #make empty vector
for(i in 1:1000){
#starting with 10 to test
mean_heights_1000[i] <- get_heights(1000)
#run get heights for 100 people
#and store result in mean_heights 100
}
########### 6 ##############
#find the min between both sets
min_height <-
as.integer(min(min(mean_heights_100), min(mean_heights_1000)) - 1)
#find the max between both sets
max_height <-
as.integer(max(max(mean_heights_100), max(mean_heights_1000)) + 1)
#setting the bins
bins <- seq(min_height, max_height, by = 1)
#collecting counts based on our bins
counts_h100 <- hist(mean_heights_100,breaks=bins)$counts
counts_h1000 <- hist(mean_heights_1000,breaks=bins)$counts
par(mfrow=c(1,1), mar=c(4, 4, 3, 2)) #sets plotting area and
#margins
pdf(file="plotting_hw_tdc.pdf", width=6,height=6); #open the
file
barplot(rbind(counts_h100,counts_h1000),col=c(2,4),beside=T,names.arg=
seq(min_height, (max_height - 1), by = 1),xlab="Average Height (in)",ylab="Count")
#100 = red(2), 1000 = blue (4)
#adding the legend
legend(1,400,c("n = 100","n = 1000"),col=c(2,4), pch=16, cex = 1.5)
#(x pos of top L, y pos of top L, labels, label colors, shapes, legend size)
dev.off() #close file
barplot(rbind(counts_h100,counts_h1000),col=c(2,4),beside=T,names.arg=
seq(min_height, (max_height - 1), by = 1),xlab="Average Height (in)",ylab="Count")
#100 = red(2), 1000 = blue (4)
#adding the legend
legend(1,400,c("n = 100","n = 1000"),col=c(2,4), pch=16, cex = 1.5)
rgins
pdf(file="plotting_hw_hist_tdc.pdf", width=6,height=6); #open the
file
barplot(rbind(counts_h100,counts_h1000),col=c(2,4),beside=T,names.arg=
seq(min_height, (max_height - 1), by = 1),xlab="Average Height (in)",ylab="Count")
#100 = red(2), 1000 = blue (4)
#adding the legend
legend(1,400,c("n = 100","n = 1000"),col=c(2,4), pch=16, cex = 1.5)
#(x pos of top L, y pos of top L, labels, label colors, shapes, legend size)
dev.off() #close file
barplot(rbind(counts_h100,counts_h1000),col=c("purple",4),beside=T,names.arg=
seq(min_height, (max_height - 1), by = 1),xlab="Average Height (in)",ylab="Count")
#rbind used so samples will be compared at each bin
#100 = red(2), 1000 = blue (4)
#besides arg say bars show side by side v stacked
#names.arg sets labels of each pt on x axis
#x/y lab are the labels for the axis
#adding the legend
legend(1,400,c("n = 100","n = 1000"),col=c("purple",4), pch=16, cex = 1.5)
#(x pos of top L, y pos of top L, labels, label colors, shapes, legend size)
for(i in 1:9) {
#a loop that indents 8 times then prints an *
if(i < 9) {
cat("\n") #if i < 9 just indent
}
if(i == 9) {
print("*") #if i == 9 print an * note "" needed
}
}
### this works but is ugly as hell
star <- vector(length = 9) #make star an empty vector
previous <- NULL #make previous an empty vector
for(i in 1:9) {
if (i == 1){ #for first loop just inputting an *
star[i] <- "*"
previous <- star[i] #setting start of previous to just *
}
if(i < 9 & i > 1){ #now paste together previous * using &
star[i] <- "*" #set that given thing to *
previous <- paste(previous, star[i], sep="&")
}
#paste things together
#with & in between
if(i == 9){
star[i] <- "*" #set that given thing to *
previous <- paste(previous, star[i], "*", sep="&")
#note here we add another * to get 10 total
print(previous) #when we get to the end print the string
}
}
years <- c( 2015, 2016, 2018, 2020, 2021)
for(ii in 1:length(years)){
#if year is divisible by 4 give presidential and congressional message
if(years[ii] %% 4 == 0){
cat(years[ii], 'Hooray, presidential and congressional elections!', sep = '\t', fill = T)
}
#if year is divisible by 2 but not 4 give congressional election
if(years[ii] %% 4 > 0 & years[ii] %% 2 == 0) {
cat(years[ii], 'Hooray, congressional elections!', sep = '\t', fill = T)
}
}
num_sum <- 0 #make num_sum empty vector
num <- 0 #make num empty var
while(num < 17){
num <- num + 1 #add 1 to num
num_sum <- num_sum + num
print(num_sum)
}
print(num_sum)
num_size <- function(num){
if (num <= -1){
print("small")
}
if (num > -1 & num < 1){
print("medium")
}
if (num >= 1){
print("big")
}
}
num_sum(5)
num_size <- function(num){
if (num <= -1){
print("small")
}
if (num > -1 & num < 1){
print("medium")
}
if (num >= 1){
print("big")
}
}
num_size(5)
num_size(0)
num_size(-5)
bankAccounts <- c(10, 9.2, 5.6); #define bank accounts here
interestRate <- 0.0525;
house <- c(4.8, 3.8, 5.7); #deduct
food<- c(3.5, 4.3, 5.0);    #deduct
fun <- c(7.8, 2.1, 10.5);  #deduct
#and incomes (through TAships) of
income <- c(21, 21, 21); #add this
for (j in 1:5) { #this will repeat it for 5 years
for (i in 1:length(bankAccounts)) {
####for each student we are modifying base income then doing interest
#step 1 modify bankAccounts so that amounts reflect income and expenses
bankAccounts[i] <- bankAccounts[i] - house[i] - food[i] - fun[i] + income[i]
#step 2 get calculate interest and add to accounts from step 1
bankAccounts[i] <- interestRate*bankAccounts[i] + bankAccounts[i]
#you can actually use the line you have already written if you
#modify amounts in bankAccounts directly in step 1
}
print(bankAccounts)
}
years <- 2015:2020
bankAccounts <- c(10, 9.2, 5.6); #define bank accounts here
interestRate <- 0.0525;
house <- c(4.8, 3.8, 5.7); #deduct
food<- c(3.5, 4.3, 5.0);    #deduct
fun <- c(7.8, 2.1, 10.5);  #deduct
#and incomes (through TAships) of
income <- c(21, 21, 21); #add this
for (j in 1:length(years)) { #this will repeat it for 5 years
if(years[j] %% 2 == 0){ #even number years unchanged
for (i in 1:length(bankAccounts)) {
####for each student we are modifying base income then doing interest
#step 1 modify bankAccounts so that amounts reflect income and expenses
bankAccounts[i] <- bankAccounts[i] - house[i] - food[i] - fun[i] + income[i]
#step 2 get calculate interest and add to accounts from step 1
bankAccounts[i] <- interestRate*bankAccounts[i] + bankAccounts[i]
#you can actually use the line you have already written if you
#modify amounts in bankAccounts directly in step 1
}
print(bankAccounts)
}
if(years[j] %% 2 == 1){ #odd number years unchanged
for (i in 1:length(bankAccounts)) {
#students 1 and 3 get 5K, lucky bastards
bankAccounts[c(1,3)] <- bankAccounts[c(1,3)] + c(5, 5)
####for each student we are modifying base income then doing interest
#step 1 modify bankAccounts so that amounts reflect income and expenses
bankAccounts[i] <- bankAccounts[i] - house[i] - food[i] - fun[i] + income[i]
#step 2 get calculate interest and add to accounts from step 1
bankAccounts[i] <- interestRate*bankAccounts[i] + bankAccounts[i]
#you can actually use the line you have already written if you
#modify amounts in bankAccounts directly in step 1
}
print(bankAccounts)
}
}
############# 1 #############
#make a function to randomly generate heights of n people and with give mean/sd
get_heights <- function(pop_size){
#pop_size is how many samples to take
#take random numbers with mean of 69 in and sd of 10 in
#stored in variable heights
heights <- rnorm(pop_size, mean = 69, sd = 10)
#str(heights) #for testing print this
}
############ 2 ############
#modifying to now calculate mean
get_heights <- function(pop_size){
#pop_size is how many samples to take
#take random numbers with mean of 69 in and sd of 10 in
#stored in variable heights
heights <- rnorm(pop_size, mean = 69, sd = 10)
#str(heights) #for testing print this
h_mean <- mean(heights) #calc and store mean of heights
}
########## 3 #############
#modifying to now print mean
get_heights <- function(pop_size = 100){
#pop_size is how many samples to take
#take random numbers with mean of 69" and sd of 10"
#stored in variable heights
heights <- rnorm(pop_size, mean = 69, sd = 10)
#str(heights) #for testing print this
h_mean <- mean(heights) #store mean of heights
h_mean #print mean of heights
}
############ 4 ##############
#run 1000 simulations of sampling 100 people
mean_heights_100 <- NULL #make empty vector
for(i in 1:1000){
#starting with 10 to test
mean_heights_100[i] <- get_heights(100)
#run get heights for 100 people
#and store result in mean_heights 100
}
############ 5 ##############
#run 1000 simulations of sampling 1000 people
mean_heights_1000 <- NULL #make empty vector
for(i in 1:1000){
#starting with 10 to test
mean_heights_1000[i] <- get_heights(1000)
#run get heights for 100 people
#and store result in mean_heights 100
}
########### 6 ##############
#find the min between both sets
min_height <-
as.integer(min(min(mean_heights_100), min(mean_heights_1000)) - 1)
#find the max between both sets
max_height <-
as.integer(max(max(mean_heights_100), max(mean_heights_1000)) + 1)
#setting the bins
bins <- seq(min_height, max_height, by = 1)
#collecting counts based on our bins
counts_h100 <- hist(mean_heights_100,breaks=bins)$counts
counts_h1000 <- hist(mean_heights_1000,breaks=bins)$counts
par(mfrow=c(1,1), mar=c(4, 4, 3, 2)) #sets plotting area and
barplot(rbind(counts_h100,counts_h1000),col=c(2,4),beside=T,names.arg=
seq(min_height, (max_height - 1), by = 1),xlab="Average Height (in)",ylab="Count")
#rbind used so samples will be compared at each bin
#100 = red(2), 1000 = blue (4)
#besides arg say bars show side by side v stacked
#names.arg sets labels of each pt on x axis
#x/y lab are the labels for the axis
#adding the legend
legend(1,400,c("n = 100","n = 1000"),col=c(2,4), pch=16, cex = 1.5)
#(x pos of top L, y pos of top L, labels, label colors, shapes, legend size)
########## 1 ##############
for(i in 1:9) {
#a loop that indents 8 times then prints an *
if(i < 9) {
cat("\n") #if i < 9 just indent
}
if(i == 9) {
print("*") #if i == 9 print an * note "" needed
}
}
### this works but is ugly as hell
star <- vector(length = 9) #make star an empty vector
previous <- NULL #make previous an empty vector
for(i in 1:9) {
if (i == 1){ #for first loop just inputting an *
star[i] <- "*"
previous <- star[i] #setting start of previous to just *
}
if(i < 9 & i > 1){ #now paste together previous * using &
star[i] <- "*" #set that given thing to *
previous <- paste(previous, star[i], sep="&")
}
#paste things together
#with & in between
if(i == 9){
star[i] <- "*" #set that given thing to *
previous <- paste(previous, star[i], "*", sep="&")
#note here we add another * to get 10 total
print(previous) #when we get to the end print the string
}
}
years <- c( 2015, 2016, 2018, 2020, 2021)
for(ii in 1:length(years)){
#if year is divisible by 4 give presidential and congressional message
if(years[ii] %% 4 == 0){
cat(years[ii], 'Hooray, presidential and congressional elections!', sep = '\t', fill = T)
}
#if year is divisible by 2 but not 4 give congressional election
if(years[ii] %% 4 > 0 & years[ii] %% 2 == 0) {
cat(years[ii], 'Hooray, congressional elections!', sep = '\t', fill = T)
}
}
bankAccounts <- c(10, 9.2, 5.6, 3.7, 8.8, 0.5);
#Now look at the error message the following lines of code produce.
#Can you think of a way to modify this loop so that the loop will compund the interest?
interestRate <- 0.0125;
compounded <- NULL #create empty vector compounded
for (i in 1:length(bankAccounts)) {
compounded[i] <- interestRate*bankAccounts[i] + bankAccounts[i]; }
bankAccounts <- c(10, 9.2, 5.6); #define bank accounts here
interestRate <- 0.0525;
house <- c(4.8, 3.8, 5.7); #deduct
food<- c(3.5, 4.3, 5.0);    #deduct
fun <- c(7.8, 2.1, 10.5);  #deduct
#and incomes (through TAships) of
income <- c(21, 21, 21); #add this
for (j in 1:5) { #this will repeat it for 5 years
for (i in 1:length(bankAccounts)) {
####for each student we are modifying base income then doing interest
#step 1 modify bankAccounts so that amounts reflect income and expenses
bankAccounts[i] <- bankAccounts[i] - house[i] - food[i] - fun[i] + income[i]
#step 2 get calculate interest and add to accounts from step 1
bankAccounts[i] <- interestRate*bankAccounts[i] + bankAccounts[i]
#you can actually use the line you have already written if you
#modify amounts in bankAccounts directly in step 1
}
print(bankAccounts)
}
years <- 2015:2020
bankAccounts <- c(10, 9.2, 5.6); #define bank accounts here
interestRate <- 0.0525;
house <- c(4.8, 3.8, 5.7); #deduct
food<- c(3.5, 4.3, 5.0);    #deduct
fun <- c(7.8, 2.1, 10.5);  #deduct
#and incomes (through TAships) of
income <- c(21, 21, 21); #add this
for (j in 1:length(years)) { #this will repeat it for 5 years
if(years[j] %% 2 == 0){ #even number years unchanged
for (i in 1:length(bankAccounts)) {
####for each student we are modifying base income then doing interest
#step 1 modify bankAccounts so that amounts reflect income and expenses
bankAccounts[i] <- bankAccounts[i] - house[i] - food[i] - fun[i] + income[i]
#step 2 get calculate interest and add to accounts from step 1
bankAccounts[i] <- interestRate*bankAccounts[i] + bankAccounts[i]
#you can actually use the line you have already written if you
#modify amounts in bankAccounts directly in step 1
}
print(bankAccounts)
}
if(years[j] %% 2 == 1){ #odd number years unchanged
for (i in 1:length(bankAccounts)) {
#students 1 and 3 get 5K, lucky bastards
bankAccounts[c(1,3)] <- bankAccounts[c(1,3)] + c(5, 5)
####for each student we are modifying base income then doing interest
#step 1 modify bankAccounts so that amounts reflect income and expenses
bankAccounts[i] <- bankAccounts[i] - house[i] - food[i] - fun[i] + income[i]
#step 2 get calculate interest and add to accounts from step 1
bankAccounts[i] <- interestRate*bankAccounts[i] + bankAccounts[i]
#you can actually use the line you have already written if you
#modify amounts in bankAccounts directly in step 1
}
print(bankAccounts)
}
}
num_sum <- 0 #make num_sum empty vector
num <- 0 #make num empty var
while(num < 17){
num <- num + 1 #add 1 to num
num_sum <- num_sum + num
print(num_sum)
}
print(num_sum)
num_size <- function(num){
if (num <= -1){
print("small")
}
if (num > -1 & num < 1){
print("medium")
}
if (num >= 1){
print("big")
}
}
num_size(1/2)
num_size(-3:3)
num_size(seq(-3, 3, by = 1)
)
num_size(c(-1,2,3))
